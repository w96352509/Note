練習工具 : Eclipes
練習環境 : java8
組合 :
 0. @ExceptionHandler
 1. @ExceptionHandler + @ControllerAdvice
 2. @ExceptionHandler + 自訂義(視為 RuntimeException)
 3. 自訂義 與 @ControllerAdvice 同時存在已 @ControllerAdvice 為主

範例 :
 jsp : div / error 
 con : DivController(BindException.class, ArithmeticException.class , 被 10 整除拋出 RuntimeException) 
     / GlobalController(攔截 RuntimeException)
 exception : MyGlobalHandlerExceptionResolver(自訂)

 舉例 : 0 / 0 -> BindException.class, ArithmeticException.class
     100 / 10 -> RuntimeException
--------------------------------------------------------------------------------- 

1. @ExceptionHandler(在 @controller 中使用)
   範例 :
    @Controller
    @RequestMapping("/session14/div")
    public class DivController {
  
   
     @ExceptionHandler({BindException.class, ArithmeticException.class 設定接收錯誤類型})      // 在接收錯誤後執行
     public String ... (){
     
      }
     }
---------------------------------------------------------------------------------

2. @ControllerAdvice 全 @Controller 接收
     範例 :
     @ControllerAdvice  // 全域 @Controller 攔截
     public class GlobalController {
	 
	  @ExceptionHandler({RuntimeException.class})  // 在接收 RuntimeException 錯誤後執行
	  public String catchException(Exception ex, Model model, HttpServletRequest request) {
		
	  }
	  
	  @ModelAttribute(name = "global_map")        // 全 @Controller 的前端可以使用此 ModelAttribute -> ${global_map}
	  public String mydata() {
		
	   }
	  
	 }

---------------------------------------------------------------------------------
3. 自訂義 : @Component + 實作 HandlerExceptionResolver + 覆寫 resolveException	 
     範例 :
	 @Component
     public class MyGlobalHandlerExceptionResolver implements HandlerExceptionResolver {
	 
	  // 不能使用 Model 宣告因為是 @Override 
	  @Override
	  public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,
			Exception ex) {
		String referer = request.getHeader("Referer");
		// 注意
		ModelAndView mv = new ModelAndView();
		mv.setViewName("session14/error");
		mv.addObject("referer", referer);
		mv.addObject("ex", "全局異常捕獲: " + ex);
		System.out.println("自訂義");
		return mv;
	  }
	 }
	 
	 
---------------------------------------------------------------------------------
JSP 範本 :

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="spform" uri="http://www.springframework.org/tags/form" %>    
<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" href="https://unpkg.com/purecss@2.0.6/build/pure-min.css">
		<meta charset="UTF-8">
		<title>Div</title>
	</head>
	<body style="padding: 15px">
		<spform:form class="pure-form"
					 method="post"
					 modelAttribute="div"
					 action="${ pageContext.request.contextPath }/mvc/session14/div/">
			<fieldset>
				<legend>整數除法計算</legend>
				分子: <spform:input path="x" /><p />
				分母: <spform:input path="y" /><p />
				<button type="submit" class="pure-button pure-button-primary">計算</button>
			</fieldset>
			
		</spform:form>
		結果: ${ result }<p />
		<hr />
		${ global_map }
	</body>
</html>	 
---------------------------------------------------------------------------------

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" href="https://unpkg.com/purecss@2.0.6/build/pure-min.css">
		<meta charset="UTF-8">
		<title>錯誤管理頁面</title>
	</head>
	<body style="padding: 15px">
		<form class="pure-form" action="${ referer }">
			<fieldset>
				<legend>錯誤管理</legend>
				Referer: ${ referer }<p />
				錯誤訊息: ${ ex }<p />
				<button type="submit" class="pure-button pure-button-primary">返回</button>
			</fieldset>
			
		</form>
	</body>
</html>